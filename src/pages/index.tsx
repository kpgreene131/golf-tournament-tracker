import Head from "next/head";
import React from "react";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";

interface ButtonProps
  extends React.DetailedHTMLProps<
      React.ButtonHTMLAttributes<HTMLButtonElement>,
      HTMLButtonElement
    >,
    React.AriaAttributes {}

export const Button: React.FC<ButtonProps> = (props) => {
  const { children, onClick } = props;

  return (
    <button className="rounded-xl bg-slate-500 p-3" onClick={onClick}>
      {children}
    </button>
  );
};

export default function Home() {
  const [numPlayers, setNumPlayers] = useState<number | null>(null);
  const [playerNames, setPlayerNames] = useState<(string | null)[]>([""]);
  const [error, setError] = useState<string>("");
  const { handleSubmit } = useForm();

  useEffect(() => {
    if (numPlayers !== null) {
      setPlayerNames(new Array(numPlayers).fill(""));
    }
  }, [numPlayers]);

  const handleNameChange =
    (index: number) => (e: React.ChangeEvent<HTMLInputElement>) => {
      const newPlayerNames = [...playerNames];
      newPlayerNames[index] = e.target.value;
      setPlayerNames(newPlayerNames);
    };

  const onPlayerClick = (numPlayers: number) => {
    return () => {
      console.log("PLAYERS: ", numPlayers);
      setNumPlayers(numPlayers);
    };
  };

  const validateNames = (names: (string | null)[]) => {
    const nameSet = new Set(names);
    console.log("VALIDATING: ", names, nameSet);
    return nameSet.size === names.length;
  };

  const onSubmit = () => {
    if (!validateNames(playerNames)) {
      setError("All players should have unique names");
      return;
    }
  
    setError("");
    return;
  };
  

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-slate-800">
        <div className="container flex flex-col items-center justify-center gap-4 bg-slate-700 px-4 py-16 text-slate-200">
          <div className="mb-10 text-xl">Set Up Game</div>
          <div className="mb-2 text-xl">Number of Players</div>
          <div className="flex flex-row gap-4">
            <Button onClick={onPlayerClick(2)}>2</Button>
            <Button onClick={onPlayerClick(4)}>4</Button>
          </div>
          {numPlayers && (
            <form onSubmit={handleSubmit(onSubmit)}>
              <div className="flex flex-col gap-4">
                {Array.from({ length: numPlayers / 2 }).map((_, index) => (
                  <div
                    key={index}
                    className="flex flex-row gap-4 text-slate-800"
                  >
                    <input
                      type="text"
                      placeholder={`Player ${index * 2 + 1} Name`}
                      onChange={handleNameChange(index * 2)}
                      required
                    />
                    <input
                      type="text"
                      placeholder={`Player ${index * 2 + 2} Name`}
                      onChange={handleNameChange(index * 2 + 1)}
                      required
                    />
                  </div>
                ))}
                {error.length > 0 && <p>{error}</p>}
                <Button type="submit">Start Game</Button>
              </div>
            </form>
          )}
        </div>
      </main>
    </>
  );
}
