import { NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import React from "react";
import { useState } from "react";
import { LoadingSpinner } from "~/components/loading";
import { api } from "~/utils/api";

const PlayerForm = () => {
  const [players, setPlayers] = useState<{name:string, handicap:number}[]>(Array.from({ length: 4 }, () => ({ name: '', handicap: 0 })));

  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>, index: number) => {
    const newNames = [...players];
    newNames[index]!.name = e.target.value;
    setPlayers(newNames);
  };

  const handleHandicapChange = (e: React.ChangeEvent<HTMLInputElement>, index: number) => {
    const newNames = [...players];
    newNames[index]!.handicap = Number(e.target.value);
    setPlayers(newNames);
  };

  const addNewPlayer = () => {
    setPlayers([...players, {name:'', handicap: 0}]);
  };

  console.log(players)

  return (
    <div className="p-4">
      <form>
        <div className="flex flex-row">
          <div className="w-full mx-2">Player Name</div>
          <div className="w-full mx-2">Player Handicap</div>
        </div>
        {players.map((player, index) => (
          <div className="mb-2 flex flex-row" key={index}>
            <input
              type="text"
              placeholder={`Player ${index + 1}`}
              value={player.name}
              onChange={(e) => handleNameChange(e, index)}
              className="w-full border p-2 mx-2"
            />
            <input
              type="number"
              value={player.handicap}
              onChange={(e) => handleHandicapChange(e, index)}
              className="w-full border p-2 mx-2"
            />
          </div>
        ))}

        <button
          type="button"
          onClick={addNewPlayer}
          className="bg-blue-500 p-2 text-white"
        >
          Add Player
        </button>
        <button
          type="button"
          onClick={addNewPlayer}
          className="bg-blue-500 p-2 text-white float-right"
        >
          Submit
        </button>
      </form>
    </div>
  );
};

const CoursePage: NextPage = () => {
  const router = useRouter();
  const {
    query: { id },
  } = router;

  if (!id) {
    return <div>404</div>;
  }

  const courseId = id as string;
  const { data: course, isLoading: coursesLoading } =
    api.course.getById.useQuery({ id: courseId });

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-slate-800">
        <div className="container flex flex-col items-center justify-center gap-4 bg-slate-700 px-4 py-16 text-slate-200">
          {course ? (
            <div className="text-center">
              <div>{course.name}</div>
              <a href={`/scorecard/${courseId}`} target="_blank">See scorecard</a>
              </div>
          ) : (
            <LoadingSpinner />
          )}
          <PlayerForm />
        </div>
      </main>
    </>
  );
};

export default CoursePage;
